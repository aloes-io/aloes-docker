worker_processes 4;

events {
        worker_connections 1024;
}

http {


    map $http_origin $cors_header {
        default "";
        "~^https?://[^/]+\.${NGINX_DOMAIN}\.${NGINX_EXTENSION}(:[0-9]+)?$" "$http_origin";
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream aloes_clients {
       server client:${HTTP_CLIENT_PORT};
    }

    upstream aloes_http_api_servers {
        least_conn;
        server http-api-1:${HTTP_SERVER_PORT};
        server http-api-2:${HTTP_SERVER_PORT};
    }

    upstream aloes_ws_api_servers {
        least_conn;
        server mqtt-api-1:${WS_BROKER_PORT} max_fails=3 fail_timeout=15s;
        server mqtt-api-2:${WS_BROKER_PORT} max_fails=3 fail_timeout=15s;
    }

    server {
        listen ${NGINX_HTTP_SERVER_PORT};
        listen [::]:${NGINX_HTTP_SERVER_PORT};
        server_name ${NGINX_HTTP_SERVER_HOST};

        location / {
            proxy_pass http://aloes_clients;
            proxy_redirect off;
            proxy_http_version 1.1;
            # return 301 https://$host/$request_uri;
        }

        location /app/ {
            proxy_pass http://aloes_http_api_servers/;
            proxy_redirect off;
            proxy_http_version 1.1;
            # return 301 https://$host/app/$request_uri;
        }

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

    }


}

stream {
    
    log_format mqtt '$remote_addr [$time_local] $protocol $status $bytes_received ' 
                '$bytes_sent $upstream_addr';

    upstream aloes_mqtt_api_servers {
        least_conn;
        # ip_hash;
        server mqtt-api-1:${MQTT_BROKER_PORT};
        server mqtt-api-2:${MQTT_BROKER_PORT} max_fails=3 fail_timeout=15s;
    }

    server {
        listen ${MQTT_BROKER_PORT} so_keepalive=on;

        proxy_pass aloes_mqtt_api_servers;
        # proxy_connect_timeout 1s;
        proxy_timeout 60s;

    }

}
