worker_processes 8;

events { 
    worker_connections 2048; 
}

http {

    map $http_origin $cors_header {
        default "";
        "~^https?://[^/]+\.${NGINX_DOMAIN}\.${NGINX_EXTENSION}(:[0-9]+)?$" "$http_origin";
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    map $status $loggable {
        ~^[23]  0;
        default 1;
    }

    upstream aloes_clients {
       server client:${HTTP_CLIENT_PORT};
    }

    upstream aloes_http_api_servers {
        least_conn;
        server http-api-1:${HTTP_SERVER_PORT};
        server http-api-2:${HTTP_SERVER_PORT};
        server http-api-3:${HTTP_SERVER_PORT};
    }

    upstream aloes_ws_api_servers {
        least_conn;
        server mqtt-api-1:${WS_BROKER_PORT};
        server mqtt-api-2:${WS_BROKER_PORT};
    }

    server {
        listen ${NGINX_HTTP_SERVER_PORT};
        listen [::]:${NGINX_HTTP_SERVER_PORT};
        server_name ${NGINX_HTTP_SERVER_HOST};

        location / {
            # proxy_pass http://aloes_clients;
            # proxy_redirect off;
            # proxy_http_version 1.1;
            return 301 https://$host/$request_uri;
        }

        location /app/ {
            return 301 https://$host/app/$request_uri;
        }

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

    }

    server {
        listen ${NGINX_HTTPS_SERVER_PORT} ssl;
        listen [::]:${NGINX_HTTPS_SERVER_PORT} ssl ipv6only=on;
        server_name ${NGINX_HTTP_SERVER_HOST};

        # following statements will be valid after running ./config/certbot/letsencrypt-init.sh
        ssl_certificate /etc/letsencrypt/live/${NGINX_HTTP_SERVER_HOST}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${NGINX_HTTP_SERVER_HOST}/privkey.pem;
        # include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # access_log /etc/nginx/log/http-access-prod.${NGINX_HTTP_SERVER_HOST}.log;
        error_log /etc/nginx/log/http-error-prod.${NGINX_HTTP_SERVER_HOST}.log warn;

        location / {
           # proxy_set_header Access-Control-Allow-Origin $cors_header;
            proxy_pass http://aloes_clients;
            proxy_redirect off;
            proxy_http_version 1.1;
        }

        # location ~* \.(?:ico|css|gif|jpe?g|png)$ {
        #     expires max;
        #     add_header Pragma public;
        #     add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        # }

        location /app/ {
            proxy_set_header Access-Control-Allow-Origin $cors_header;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
            proxy_pass http://aloes_http_api_servers/;
            proxy_redirect off;
            proxy_http_version 1.1;
        }

        location /ws {
            proxy_set_header Access-Control-Allow-Origin $cors_header;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
            proxy_pass http://aloes_ws_api_servers;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

}

stream {
    
    log_format mqtt '$remote_addr [$time_local] $protocol $status $bytes_received ' 
                '$bytes_sent $upstream_addr';

    # access_log /etc/nginx/log/mqtt-access-prod.${NGINX_HTTP_SERVER_HOST}.log mqtt;
    error_log /etc/nginx/log/mqtt-error-prod.${NGINX_HTTP_SERVER_HOST}.log;

    upstream aloes_mqtt_api_servers {
        least_conn;
        server mqtt-api-1:${MQTT_BROKER_PORT};
        server mqtt-api-2:${MQTT_BROKER_PORT};
    }

    server {
        listen ${MQTT_BROKER_PORT} so_keepalive=on;

        proxy_pass aloes_mqtt_api_servers;
        proxy_connect_timeout 2s;
        proxy_timeout 60s;
    }

    server {
        listen ${MQTTS_BROKER_PORT} ssl so_keepalive=on;

        ssl_certificate /etc/letsencrypt/live/${NGINX_HTTP_SERVER_HOST}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${NGINX_HTTP_SERVER_HOST}/privkey.pem;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ssl_session_cache   shared:SSL:128m; # 128MB ~= 500k sessions
        ssl_session_tickets on;
        ssl_session_timeout 8h;

        proxy_ssl off;
        proxy_pass aloes_mqtt_api_servers;
        proxy_connect_timeout 2s;
        proxy_timeout 60s;
    }
}