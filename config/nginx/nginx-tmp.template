# Copyright 2019 Edouard Maleix, read LICENSE

worker_processes 4;

events {
  worker_connections 1024;
}

http {

  map $http_origin $cors_header {
    default "";
    "~^https?://[^/]+\.${NGINX_DOMAIN}\.${NGINX_EXTENSION}(:[0-9]+)?$" "$http_origin";
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  map $sent_http_content_type $expires {
    default                       off;
    text/html                     epoch;
    text/css                      max;
    text/javascript               max;
    application/javascript        max;
    font/ttf                      max;
    font/otf                      max;
    font/woff                     max;
    font/woff2                    max;
    application/vnd.ms-fontobject max;
    ~image/                       max;
  }

  upstream aloes_http_api_servers {
    least_conn;
    server http-api-1:${HTTP_SERVER_PORT};
    server http-api-2:${HTTP_SERVER_PORT};
  }

  upstream aloes_ws_api_servers {
    least_conn;
    server mqtt-api-1:${WS_BROKER_PORT} max_fails=3 fail_timeout=15s;
    server mqtt-api-2:${WS_BROKER_PORT} max_fails=3 fail_timeout=15s;
  }

  server {
    listen ${NGINX_HTTP_SERVER_PORT};
    listen [::]:${NGINX_HTTP_SERVER_PORT};
    server_name ${NGINX_HTTP_SERVER_HOST};

    include mime.types;
    types { 
      application/json map; 
    }
    charset utf-8;
    source_charset utf-8;

    location / {
      root   /etc/nginx/html;
      index  index.html index.htm;
      try_files $uri $uri/ /index.html;
      expires $expires;
      gzip_static on;
    }

    location /app/ {
      proxy_pass http://aloes_http_api_servers/;
      proxy_redirect off;
      proxy_http_version 1.1;
    }

    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }
  }
}

stream {

  log_format mqtt '$remote_addr [$time_local] $protocol $status $bytes_received ' 
            '$bytes_sent $upstream_addr';

  upstream aloes_mqtt_api_servers {
    least_conn;
    # ip_hash;
    server mqtt-api-1:${MQTT_BROKER_PORT};
    server mqtt-api-2:${MQTT_BROKER_PORT} max_fails=3 fail_timeout=15s;
  }

  server {
    listen ${MQTT_BROKER_PORT} so_keepalive=on;
    proxy_pass aloes_mqtt_api_servers;
    proxy_connect_timeout 2s;
    proxy_timeout 60s;
  }

}
